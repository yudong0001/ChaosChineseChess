
<script type="text/javascript" src="/javascripts/jquery.min.js"></script>

<script type="text/javascript">
$(document).ready(function(){
    
    var EMPTY_NAME = 'ç©º';

    var playMode = 'humanAI';
    var playerColor = false;

    var rowsCount = <%=rowsCount%>;
    var columnsCount = <%=columnsCount%>;
    //var cellSize = <%=cellSize%>;
    //var pageWidth = parseFloat(document.body.scrollWidth;
    var boardWidth = parseFloat($('#board').css('width'));
    console.log('board width:'+boardWidth);//******
    var cellSize = parseInt(boardWidth/9-2);
    var cellDSize = parseInt(boardWidth/16-2);
    console.log('cell-size:'+cellSize);//******
    $('#board').css('height',(cellSize+2)*rowsCount);
    $('.cell').css('width',cellSize).css('height',cellSize);
    $('#divDeads').css('height',(cellDSize+2)*2);
    $('.cellDead').css('width',cellDSize).css('height',cellDSize);
    var bgMargin = cellSize/2*0.7;
    $('#board').css('background-position-x', bgMargin);
    $('#board').css('background-position-y', bgMargin);
    $('.action1').css('height',parseFloat($('.action1').css('width')));
    $('.action2').css('height',parseFloat($('.action2').css('width'))/2);

    function getCellFromMami(jqMami) {
        // var x = jqMami.css('left');
        // var y = jqMami.css('top');
        // x = x.substring(0, x.length - 2) / cellSize;
        // y = y.substring(0, y.length - 2) / cellSize;
        var cellid = jqMami.attr('id');
        console.log('clicked cell id:'+cellid);//*******
        var y = cellid.substring(4,5)%10;
        var x = cellid.substring(4)%10;
        console.log('clicked cell x,y:'+x+':'+y);//*****
        return {x: x, y: y};
    }

    // function updateMamiForCell(jqMami, cell) {
    //     console.log('cell in update function: %o',cell);//*********
    //     if (cell.hidden) {
    //         return;
    //     } else {
    //         jqMami.addClass('discovered');
    //     }
    //     if (cell.name == EMPTY_NAME) {
    //         jqMami.removeClass('red discovered selected').addClass('discovered empty').text('');
    //     } else {
    //         jqMami.removeClass('red black').addClass(cell.camp).text(cell.name);
    //     }
    // }

    var enemy = false;

    function updateCell(cell) {
        console.log('cell in update function: %o',cell);//*********
        var jqMami = $('#cell'+cell.y+cell.x);
        if (cell.hidden) {
            return;
        } else {
            jqMami.addClass('discovered');
        }
        if (cell.name == EMPTY_NAME) {
            //jqMami.removeClass('red black selected killed').css('background-image', '');//actually
            jqMami.removeClass('red black selected killed').text('');//for development test
        } else {
            //jqMami.removeClass('red black selected killed').css('background-image', 'url(/image/'+cell.camp+'-'+cell.fname+'.png)');//actually
            jqMami.removeClass('red black selected killed').addClass(' '+cell.camp).text(cell.name);//for development test
        }
    }

    function updateBoard(){
        console.log('Update board.');//*********
        $('.cell').each(function(i, o){
            var jqMami = $(o);
            updateMamiForCell(jqMami, getCellFromMami(jqMami));
        });
    }

    function trigAI(){
        console.log('trigger AI action.enemy:'+enemy);//***********
        var maxCellX = columnsCount-1;
        var maxCellY = rowsCount-1;
        $('#cell' + maxCellY + maxCellX ).trigger('click');
        console.log('cell triggered for AI: #cell' + maxCellY + maxCellX );//**************
    };

    $('#Restart').click(function(e){
        window.location.reload();
    });
    $('#divAway').click(function(e){
        window.location.reload();
    });
    $('#divPeace').click(function(e){
        window.location.reload();
    });
    $('#divSet').click(function(){
        $('.buttons').toggle();
    });

    $('#AI').click(function(e){
        playMode = 'humanAI';
        $('.modeButton').removeClass('playerBorder');
        $('#AI').addClass('playerBorder');
        setTimeout(function(){
            $('.buttons').hide();
        }, 2000);
    });//set AI mode

    $('#Human').click(function(e){
        playMode = 'human';
        $('.modeButton').removeClass('playerBorder');
        $('#Human').addClass('playerBorder');
        setTimeout(function(){
            $('.buttons').hide();
        }, 2000);
        $('#player2').text('HUMAN');
        console.log('human mode clicked.playmode='+playMode);//*******
    });//set human mode

    $('.cell').click(function(e){
        console.log('cell click called: %o',e);//***************
        if(!$('#AI').hasClass('selected')&&!$('#Human').hasClass('selected')){
            $('#AI').trigger('click');
        }//set default mode to 'AI'

        var clicked = $(e.currentTarget);
        var cellPos = getCellFromMami(clicked);
        var wTime = 50;//normal interactive interval
        console.log('enemy in loc1:'+enemy);//************
        console.log('playMode: '+playMode);//********

        $.post('/play',{ playMode:playMode ,player:enemy?"enemy":"human" ,x:cellPos.x, y:cellPos.y }, function(data){
            console.log('resp data from server: %o',data);//******
            switch (data.action){
                case 'discover':
                    updateCell(data.cell);
                    enemy = !enemy;
                    console.log('value of playerColor:'+playerColor);//******
                    if(!playerColor){
                        console.log('start add color for players,first:'+data.cell.camp);//*******
                        playerColor = !playerColor;
                        $('#player1').addClass(data.cell.camp);
                        $('#player2').addClass(data.cell.camp=='red'?'black':'red');
                    }
                    break;
                case 'select':$('#cell'+data.cell.y+data.cell.x).addClass('selected');break;
                case 'unselect':$('#cell'+data.cell.y+data.cell.x).removeClass('selected');break;
                case 'xselect':$('.cell').removeClass('selected');$('#cell'+data.cell.y+data.cell.x).addClass('selected');break;
                case 'kill':
                    $('#cell'+data.killer.y+data.killer.x).addClass('selected');
                    $('#cell'+data.killed.y+data.killed.x).addClass('killed');
                    if(playMode == 'humanAI'&&enemy){
                        wTime = 500;
                    }//set interactive interval for AI
                    setTimeout(function(){
                        updateCell(data.killer);
                        updateCell(data.killed);
                        enemy = !enemy;
                    }, wTime);
                    break;
                case 'finished':enemy = false;break;
                case 'pass':enemy = false;break;
            }
            //updateBoard();
            console.log('enemy after post: '+ enemy);//**********
            setTimeout(function(){
                if(enemy){
                    wTime = 50;
                    if(playMode == 'humanAI'){
                        console.log('trig AI');//**********
                        trigAI();
                    }
                    // $('.player').removeClass('playerBorder');
                    // $('#player2').addClass('playerBorder');
                    $('.player').hide();
                    $('#player2').show();
                }else{
                    // $('.player').removeClass('playerBorder');
                    // $('#player1').addClass('playerBorder');
                    $('.player').hide();
                    $('#player1').show();
                }
            }, wTime);
            
        });
    });
});

</script>